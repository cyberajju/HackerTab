document.addEventListener("DOMContentLoaded", function () {
    // Background handling functions
    function setBackgroundImage(id) {
        if (id === null || id === undefined) {
            document.getElementById("canvasContainer").style.display = "block";
            document.getElementById("body").style.backgroundImage = "none";
            document.getElementById("resetBackgroundBtn").style.display = "none";
            return;
        }
        
        const url = `url(media/bg/bg${id}.jpg)`;
        document.getElementById("canvasContainer").style.display = "none";
        document.getElementById("body").style.backgroundImage = url;
        document.getElementById("resetBackgroundBtn").style.display = "inline-block";
    }

    // Initialize backgrounds
    const resetBackgroundBtn = document.getElementById("resetBackgroundBtn");
    const customBackgroundsList = document.getElementById("customBackgroundsList");
    const customBgBtnToggle = document.getElementById("customBgBtnToggle");
    const thumbTemplate = document.getElementById("thumbTemplate");

    // Clear existing thumbnails
    function clearBackgroundThumbnails() {
        // Remove all background thumbs except the template
        const thumbs = customBackgroundsList.querySelectorAll('.thumb:not(.template)');
        thumbs.forEach(thumb => thumb.remove());
    }
    
    // Clear thumbnails first to ensure refresh
    clearBackgroundThumbnails();
    
    // Make sure the backgrounds list is active for initial visibility
    customBackgroundsList.classList.add("active");

    // Create background thumbnails
    for (let i = 0; i <= 5; i++) {
        const thumb = thumbTemplate.cloneNode(true);
        thumb.id = "bg" + i;
        thumb.classList.remove("template");
        thumb.style.backgroundImage = `url(media/bg/bg${i}.jpg)`;
        
        // Add debug information
        const debugText = document.createElement('span');
        debugText.textContent = i;
        debugText.style.position = 'absolute';
        debugText.style.left = '5px';
        debugText.style.top = '5px';
        debugText.style.color = 'white';
        debugText.style.backgroundColor = 'rgba(0,0,0,0.5)';
        debugText.style.padding = '2px 5px';
        debugText.style.borderRadius = '3px';
        thumb.appendChild(debugText);
        
        thumb.addEventListener("click", function() {
            setBackgroundImage(i);
            localStorage.setItem("background_id", i);
            localStorage.setItem("use_own_background_image", "no");
        });
        customBackgroundsList.appendChild(thumb);
        
        // Log background loading for debugging
        console.log(`Loading background: bg${i}.jpg`);
        const testImg = new Image();
        testImg.onload = () => console.log(`Successfully loaded bg${i}.jpg`);
        testImg.onerror = () => console.error(`Failed to load bg${i}.jpg`);
        testImg.src = `media/bg/bg${i}.jpg`;
    }

    // Toggle background list
    customBgBtnToggle.addEventListener("click", function() {
        customBackgroundsList.classList.toggle("active");
    });

    // Custom background file handling
    const customBackgroundFile = document.getElementById("customBackgroundFile");
    customBackgroundFile.addEventListener("change", function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById("canvasContainer").style.display = "none";
                document.getElementById("body").style.backgroundImage = `url(${e.target.result})`;
                localStorage.setItem("use_own_background_image", "yes");
                localStorage.setItem("background_image_file", e.target.result);
                resetBackgroundBtn.style.display = "inline-block";
            };
            reader.readAsDataURL(file);
        }
    });

    // Reset background button
    resetBackgroundBtn.addEventListener("click", function() {
        localStorage.removeItem("use_own_background_image");
        localStorage.removeItem("background_image_file");
        localStorage.removeItem("background_id");
        setBackgroundImage(null);
    });

    // Load saved background
    function loadSavedBackground() {
        // Check if user has a custom background image
        if (localStorage.getItem("use_own_background_image") === "yes") {
            const savedBg = localStorage.getItem("background_image_file");
            if (savedBg) {
                document.getElementById("canvasContainer").style.display = "none";
                document.getElementById("body").style.backgroundImage = `url(${savedBg})`;
                resetBackgroundBtn.style.display = "inline-block";
                return true; // Background loaded successfully
            }
        } 
        // Check if user has a selected background ID
        else if (localStorage.getItem("background_id") !== null) {
            const bgId = localStorage.getItem("background_id");
            setBackgroundImage(bgId);
            return true; // Background loaded successfully
        }
        
        return false; // No background loaded
    }
    
    // Call the function to load saved background
    const backgroundLoaded = loadSavedBackground();
    
    // Only load animations if no background was loaded
    if (!backgroundLoaded) {
        console.log("No saved background found, using animation");
        
        // Load saved animation style
        const savedStyle = localStorage.getItem("animation_style") || "matrix";
        const activeButton = document.getElementById(savedStyle);
        if (activeButton) {
            // Instead of clicking the button, directly initialize the animation
            const canvasContainer = document.getElementById("canvasContainer");
            canvasContainer.style.display = "block";
            document.getElementById("body").style.backgroundImage = "none";
            
            // Create canvas for the saved animation
            const canvas = document.createElement("canvas");
            canvas.id = `${savedStyle}Canvas`;
            canvasContainer.appendChild(canvas);
            
            // Load and initialize the saved animation
            const animationScript = `js/canvas/${savedStyle}.js`;
            loadScript(animationScript, function() {
                const animationName = savedStyle.charAt(0).toUpperCase() + savedStyle.slice(1) + "Animation";
                if (window[animationName]) {
                    window[animationName].init();
                    window[animationName].setColor(getSavedColor());
                    window[animationName].setSpeed(getSavedSpeed());
                }
            });
            
            // Add active class to the saved animation button
            activeButton.classList.add("active");
        } else {
            // If no saved animation, default to matrix
            const matrixButton = document.getElementById("matrix");
            if (matrixButton) {
                matrixButton.click();
            }
        }
    } else {
        // If background is loaded, still set the active class on the saved animation button
        const savedStyle = localStorage.getItem("animation_style") || "matrix";
        const activeButton = document.getElementById(savedStyle);
        if (activeButton) {
            // Just add active class without initializing the animation
            activeButton.classList.add("active");
        }
    }

    // Animation controls
    const customAnimationsBtn = document.getElementById("customAnimationsBtn");
    const customAnimationsList = document.getElementById("customAnimationsList");
    const animationButtons = document.querySelectorAll(".animationBtn");

    // Toggle animation list
    customAnimationsBtn.addEventListener("click", function() {
        customAnimationsList.classList.toggle("active");
    });

    // Animation style handling
    animationButtons.forEach(function(button) {
        button.addEventListener("click", function() {
            const style = this.id;
            
            // Remove active class from all buttons
            animationButtons.forEach(btn => btn.classList.remove("active"));
            
            // Add active class to clicked button
            this.classList.add("active");
            
            // Show canvas container and hide background
            const canvasContainer = document.getElementById("canvasContainer");
            canvasContainer.style.display = "block";
            document.getElementById("body").style.backgroundImage = "none";
            
            // Clear old canvas and stop previous animation
            const prevStyle = localStorage.getItem("animation_style");
            if (prevStyle) {
                const prevAnimationName = prevStyle.charAt(0).toUpperCase() + prevStyle.slice(1) + "Animation";
                if (window[prevAnimationName] && window[prevAnimationName].stop) {
                    window[prevAnimationName].stop();
                }
            }
            while (canvasContainer.firstChild) {
                canvasContainer.removeChild(canvasContainer.firstChild);
            }
            
            // Create new canvas
            const canvas = document.createElement("canvas");
            canvas.id = `${style}Canvas`;
            canvasContainer.appendChild(canvas);
            
            // Load and initialize the selected animation
            const animationScript = `js/canvas/${style}.js`;
            loadScript(animationScript, function() {
                const animationName = style.charAt(0).toUpperCase() + style.slice(1) + "Animation";
                if (window[animationName]) {
                    window[animationName].init();
                    window[animationName].setColor(getSavedColor());
                    window[animationName].setSpeed(getSavedSpeed());
                }
            });
            
            // Save animation style
            localStorage.setItem("animation_style", style);
        });
    });

    // Helper function to load scripts
    function loadScript(src, callback) {
        const script = document.createElement("script");
        script.type = "text/javascript";
        script.src = src;
        script.onload = callback;
        document.head.appendChild(script);
    }

    // Get saved color or default
    function getSavedColor() {
        return localStorage.getItem("matrix_color") || "#00ff00";
    }

    // Get saved speed or default
    function getSavedSpeed() {
        return parseInt(localStorage.getItem("matrix_speed")) || 30;
    }

    // Force reload backgrounds button
    const forceReloadBg = document.getElementById('forceReloadBg');
    if (forceReloadBg) {
        forceReloadBg.addEventListener('click', function() {
            // Clear any cached backgrounds
            localStorage.removeItem('customBackgroundsLoaded');
            
            // Clear existing thumbnails
            clearBackgroundThumbnails();
            
            // Make sure the list is visible
            customBackgroundsList.classList.add("active");
            
            // Recreate all thumbnails
            for (let i = 0; i <= 5; i++) {
                const thumb = thumbTemplate.cloneNode(true);
                thumb.id = "bg" + i;
                thumb.classList.remove("template");
                
                // Add a cache-busting parameter to the URL
                const cacheBuster = new Date().getTime();
                thumb.style.backgroundImage = `url(media/bg/bg${i}.jpg?cb=${cacheBuster})`;
                
                // Add debug information
                const debugText = document.createElement('span');
                debugText.textContent = i;
                debugText.style.position = 'absolute';
                debugText.style.left = '5px';
                debugText.style.top = '5px';
                debugText.style.color = 'white';
                debugText.style.backgroundColor = 'rgba(0,0,0,0.5)';
                debugText.style.padding = '2px 5px';
                debugText.style.borderRadius = '3px';
                thumb.appendChild(debugText);
                
                thumb.addEventListener("click", function() {
                    setBackgroundImage(i);
                    localStorage.setItem("background_id", i);
                    localStorage.setItem("use_own_background_image", "no");
                });
                
                customBackgroundsList.appendChild(thumb);
                
                // Log background loading for debugging
                console.log(`Reloading background: bg${i}.jpg`);
            }
            
            alert("Backgrounds reloaded successfully!");
        });
    }

    // Color picker handling
    const colorPicker = document.getElementById("colorPicker");
    if (colorPicker) {
        colorPicker.addEventListener("change", function() {
            const color = this.value;
            localStorage.setItem("matrix_color", color);
            
            // Update animation color for any active animation
            const savedStyle = localStorage.getItem("animation_style") || "matrix";
            const animationName = savedStyle.charAt(0).toUpperCase() + savedStyle.slice(1) + "Animation";
            
            if (window[animationName] && window[animationName].setColor) {
                window[animationName].setColor(color);
            }
        });
        
        // Load saved color
        const savedColor = localStorage.getItem("matrix_color");
        if (savedColor) {
            colorPicker.value = savedColor;
            
            // Apply saved color to active animation
            const savedStyle = localStorage.getItem("animation_style") || "matrix";
            const animationName = savedStyle.charAt(0).toUpperCase() + savedStyle.slice(1) + "Animation";
            
            if (window[animationName] && window[animationName].setColor) {
                window[animationName].setColor(savedColor);
            }
        }
    }

    // Reset All To Default button
    const resetAllBtn = document.getElementById("resetAllBtn");
    if (resetAllBtn) {
        resetAllBtn.addEventListener("click", function() {
            // Reset background
            localStorage.removeItem("use_own_background_image");
            localStorage.removeItem("background_image_file");
            localStorage.removeItem("background_id");
            setBackgroundImage(null);
            
            // Reset animation
            localStorage.removeItem("animation_style");
            localStorage.removeItem("matrix_color");
            localStorage.removeItem("matrix_speed");
            
            // Reset color picker
            if (colorPicker) {
                colorPicker.value = "#00ff00";
            }
            
            // Reset animation button
            animationButtons.forEach(btn => btn.classList.remove("active"));
            const matrixBtn = document.getElementById("matrix");
            if (matrixBtn) {
                matrixBtn.classList.add("active");
                matrixBtn.click();
            }
            
            // Reset custom background file input
            if (customBackgroundFile) {
                customBackgroundFile.value = "";
            }
            
            // Hide background and animation lists
            customBackgroundsList.classList.remove("active");
            customAnimationsList.classList.remove("active");
        });
    }

    // Function to save all user preferences
    function saveUserPreferences() {
        // Save current animation style
        const activeAnimation = document.querySelector('.animationBtn.active');
        if (activeAnimation) {
            localStorage.setItem("animation_style", activeAnimation.id);
        }
        
        // Save current background
        const bodyStyle = document.getElementById("body").style.backgroundImage;
        if (bodyStyle && bodyStyle !== "none") {
            // Check if it's a custom background
            if (bodyStyle.includes("data:image")) {
                localStorage.setItem("use_own_background_image", "yes");
                localStorage.setItem("background_image_file", bodyStyle.replace(/^url\(['"](.+)['"]\)$/, '$1'));
            } 
            // Check if it's one of our predefined backgrounds
            else if (bodyStyle.includes("media/bg/bg")) {
                const bgId = bodyStyle.match(/bg(\d+)\.jpg/)[1];
                localStorage.setItem("use_own_background_image", "no");
                localStorage.setItem("background_id", bgId);
            }
        }
        
        // Save color and speed settings
        const colorPicker = document.getElementById("colorPicker");
        if (colorPicker) {
            localStorage.setItem("matrix_color", colorPicker.value);
        }
        
        // Log that preferences were saved
        console.log("User preferences saved to localStorage");
    }
    
    // Add event listener to save preferences before page unload
    window.addEventListener("beforeunload", saveUserPreferences);

    console.log("Developer : CyberTechAjju");
});